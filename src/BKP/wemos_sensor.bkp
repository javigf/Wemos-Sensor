#include <Arduino.h>

void setup (void){
        pinMode (2,OUTPUT);
}

void loop (void){
        digitalWrite (2,HIGH);
        delay (1000);
        digitalWrite (2,LOW);
        delay (1000);
}


// A UDP instance to let us send and receive packets over UDP
WiFiUDP udp;

// NTP
unsigned int localPort = 2390;      // local port to listen for UDP packets
/* Don't hardwire the IP address or we won't get the benefits of the pool.
 *  Lookup the IP address for the host name instead */
//IPAddress timeServer(129, 6, 15, 28); // time.nist.gov NTP server
IPAddress timeServerIP; // time.nist.gov NTP server address
const char* ntpServerName = "ar.pool.ntp.org";

const int NTP_PACKET_SIZE = 48; // NTP time stamp is in the first 48 bytes of the message

byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets

bool update_time (void);


// send an NTP request to the time server at the given address
unsigned long sendNTPpacket(IPAddress& address){
        Serial.println("sending NTP packet...");
        // set all bytes in the buffer to 0
        memset(packetBuffer, 0, NTP_PACKET_SIZE);
        // Initialize values needed to form NTP request
        // (see URL above for details on the packets)
        packetBuffer[0] = 0b11100011; // LI, Version, Mode
        packetBuffer[1] = 0; // Stratum, or type of clock
        packetBuffer[2] = 6; // Polling Interval
        packetBuffer[3] = 0xEC; // Peer Clock Precision
        // 8 bytes of zero for Root Delay & Root Dispersion
        packetBuffer[12]  = 49;
        packetBuffer[13]  = 0x4E;
        packetBuffer[14]  = 49;
        packetBuffer[15]  = 52;

        // all NTP fields have been given values, now
        // you can send a packet requesting a timestamp:
        udp.beginPacket(address, 123); //NTP requests are to port 123
        udp.write(packetBuffer, NTP_PACKET_SIZE);
        udp.endPacket();
}

bool update_time (void){
        //get a random server from the pool
        WiFi.hostByName(ntpServerName, timeServerIP);
        //Serial.printf(timeServerIP);

        sendNTPpacket(timeServerIP); // send an NTP packet to a time server
        // wait to see if a reply is available
        delay(1000);

        int cb = udp.parsePacket();
        if (!cb) {
                Serial.println("no packet yet");
                time_status = 0;
        }
        else {
                Serial.print("packet received, length=");
                Serial.println(cb);
                // We've received a packet, read the data from it
                udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer

                //the timestamp starts at byte 40 of the received packet and is four bytes,
                // or two words, long. First, esxtract the two words:

                unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
                unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
                // combine the four bytes (two words) into a long integer
                // this is NTP time (seconds since Jan 1 1900):
                unsigned long secsSince1900 = highWord << 16 | lowWord;
                Serial.print("Seconds since Jan 1 1900 = " );
                Serial.println(secsSince1900);

                // now convert NTP time into everyday time:
                Serial.print("Unix time = ");
                // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
                const unsigned long seventyYears = 2208988800UL;
                // subtract seventy years:
                unsigned long epoch = secsSince1900 - seventyYears;
                // print Unix time:
                Serial.println(epoch);


                // print the hour, minute and second:
                Serial.print("The local time is "); // UTC is the time at Greenwich Meridian (GMT)
                Serial.print(((epoch  % 86400L) / 3600) + TIMEZONE);// print the hour (86400 equals secs per day)
                Serial.print(':');
                if ( ((epoch % 3600) / 60) < 10 ) {
                        // In the first 10 minutes of each hour, we'll want a leading '0'
                        Serial.print('0');
                }
                Serial.print((epoch  % 3600) / 60);// print the minute (3600 equals secs per minute)
                Serial.print(':');
                if ( (epoch % 60) < 10 ) {
                        // In the first 10 seconds of each minute, we'll want a leading '0'
                        Serial.print('0');
                }
                Serial.println(epoch % 60); // print the second
                time_status = 1;
        }

        return time_status;
}
/////////////////////////////////7777777

/*if (text == "/ledon") {
        digitalWrite(BUILTIN_LED, LOW); // turn the LED on (HIGH is the voltage level)
        ledStatus = 1;
        bot.sendMessage(chat_id, "Led is ON", "");
   }

   else if (text == "/ledoff") {
        ledStatus = 0;
        digitalWrite(BUILTIN_LED, HIGH); // turn the LED off (LOW is the voltage level)
        bot.sendMessage(chat_id, "Led is OFF", "");
   }

   else if (text == "/status") {
        if (ledStatus == 1) {
                bot.sendMessage(chat_id, "Led is ON", "");
        }
        else if (ledStatus == 0) {
                bot.sendMessage(chat_id, "Led is OFF", "");
        }
        else if (ledStatus == 2) {
                bot.sendMessage(chat_id, "Led is BLINKING", "");
        }
        else if (ledStatus == 3) {
                bot.sendMessage(chat_id, "Led is BLINKING fast", "");
        }
        else if (ledStatus == 4) {
                bot.sendMessage(chat_id, "Led is BLINKING slow", "");
        }
   }

   else if (text == "/blink") {
        bot.sendMessage(chat_id, "Led is BLINKING", "");
        ticker.attach(0.5, tick);
        ledStatus = 2;
   }

   else if (text == "/blinkfast") {
        bot.sendMessage(chat_id, "Led is BLINKING fast", "");
        ticker.attach(0.2, tick);
        ledStatus = 3;
   }

   else if (text == "/blinkslow") {
        bot.sendMessage(chat_id, "Led is BLINKING slow", "");
        ticker.attach(0.8, tick);
        ledStatus = 4;
   }*/

else if (text == "/update") {
        update_clk ();
        String str = "Clock Updated \n";
        str += "Current time is: ";
        str += actual_time;
        str +="\n";
        str += "Current date is: ";
        str += actual_date;
        bot.sendMessage(chat_id, str, "");
        //ticker.attach(1, tick);
        ledStatus = 5;
}

else if (text == "/info") {
        //WiFi.RSSI ();
        //Serial.println (WiFi.RSSI ());
        String str  = "Info\n";

        str += "RSSI: ";
        str +=  String (WiFi.RSSI ());
        str += " db\n";

        str += "IP: ";
        str += (WiFi.localIP().toString().c_str());
        str += "\nSSID: " + String (WiFi.SSID());

        bot.sendMessage(chat_id, str, "");

        ledStatus = 6;
}

/*if (text == "/reset") {
        String str  = "Reset Wifi Settings";
        bot.sendMessage(chat_id, str, "");
        //wifiManager.resetSettings();

        ledStatus = 7;
        // TODO : WifiManager is not declared locally ??? Globally??
   }*/

else if (text == "/getVCC") {
        String str  = "BATTERY LEVEL: ";
        float voltaje=0.00f;
        voltaje = ESP.getVcc();
        str += (voltaje/1024.00f);
        str += "V\n";

        bot.sendMessage(chat_id, str, "");

        ledStatus = 8;
}

else if (text == "/reboot") {
        String str  = "Rebooting device...\n";
        bot.sendMessage(chat_id, str, "");
        rebootRequired = 1;
        ledStatus = 99;
}

else if (text == "/soporte") {
        String str  = "Datos de soporte\n";
        str += "Correo electrónico: ";
        str += contact_info.email;
        str += "\r \n";
        str += "Tweeter: ";
        str += contact_info.tweeter;
        str += "\r \n";
        str += "Telegram: ";
        str += contact_info.telegram;
        str += "\r \n";
        str += "Celular: ";
        str += contact_info.mobile;
        str += "\r \n";
        bot.sendMessage(chat_id, str, "");

        ledStatus = 99;
}

else if (text == "/options") {
        String keyboardJson = "[[\"/ledon\",\"/ledoff\"],                        [\"/blinkslow\",\"/blink\",\"/blinkfast\"],[\"/status\",\"/info\"],[\"/getVCC\",\"/reboot\"],[\"/soporte\"]]";



        bot.sendMessageWithReplyKeyboard(chat_id, "Choose from one of the following options", "", keyboardJson, true);
}

else if (text == "/start") {
        String welcome = "Welcome to Universal Arduino Telegram Bot library, " + from_name + ".\n";
        welcome += "This is Flash Led Bot example.\n\n";
        welcome += "/ledon : to switch the Led ON\n";
        welcome += "/ledoff : to switch the Led OFF\n";
        welcome += "/status : Returns current status of LED\n";
        welcome += "/blink : Blink the LED\n";
        welcome += "/blinkfast : Blink the LED fast\n";
        welcome += "/blinkslow : Blink the LED slow\n";
        welcome += "/options : Keyboard\n";
        welcome += "/info : Display Information\n";
        welcome += "/soporte : Información de soporte\n";

        bot.sendMessage(chat_id, welcome, "Markdown");
}
else{
        String unknown =  from_name + ":( no reconozco el comando recibido, probá con alguno de estas opciones.\n";

        bot.sendMessage(chat_id, unknown, "Markdown");
}
